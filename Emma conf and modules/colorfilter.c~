/*
 * Copyright (C) 2015
 *
 * This file is part of Paparazzi.
 *
 * Paparazzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * Paparazzi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Paparazzi; see the file COPYING.  If not, write to
 * the Free Software Foundation, 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/**
 * @file modules/computer_vision/colorfilter.c
 */

// Own header
#include "modules/computer_vision/cv.h"
#include "modules/computer_vision/colorfilter.h"

#include "subsystems/datalink/telemetry.h"
#include <stdio.h>
#include <std.h>

// Filter Settings
// cb is equiv to U
// cr is equiv to V
uint8_t color_lum_min = 4;
uint8_t color_lum_max = 91;
uint8_t color_cb_min  = 0;
uint8_t color_cb_max  = 124;
uint8_t color_cr_min  = 127;
uint8_t color_cr_max  = 255;

int color_count = 0;
int xtarget = 0;
struct image_t *emsimg; 

void image_labeling(struct image_t *input, struct image_t *output, struct image_filter_t *filters, uint8_t filters_cnt,
                    struct image_label_t *labels, uint16_t *labels_count)
{
  uint8_t *input_buf = (uint8_t *)input->buf;
  uint16_t *output_buf = (uint16_t *)output->buf;

  // Initialize labels
  uint16_t labels_size = *labels_count;
  uint16_t labels_cnt = 0;
  uint16_t i, x, y;

  // Initialize first line with empty groups
  uint16_t *p = output_buf;
  for (i = 0; i < output->w; i++) {
    *p++ = 0xffff;
  }

  // Do steps of 2 for YUV image
  // Skip first line as we need previous groups for connectivity
  for (y = 1; y < input->h; y++) {
    for (x = 0; x < input->w / 2; x++) {
      uint16_t lid = 0;
      uint8_t p_y = (input_buf[y * input->w * 2 + x * 4 + 1] + input_buf[y * input->w * 2 + x * 4 + 3]) / 2;
      uint8_t p_u = input_buf[y * input->w * 2 + x * 4];
      uint8_t p_v = input_buf[y * input->w * 2 + x * 4 + 2];

      // Go trough the filters
      uint8_t f = 0;
      for (; f < filters_cnt; f++) {
        if (p_y > filters[f].y_min && p_y < filters[f].y_max &&
            p_u > filters[f].u_min && p_u < filters[f].u_max &&
            p_v > filters[f].v_min && p_v < filters[f].v_max) {
          break;
        }
      }

      // Check if this pixel belongs to a filter else goto next
      if (f >= filters_cnt) {
        output_buf[y * output->w + x] = 0xFFFF;
        continue;
      }

      // Check pixel above (if the same filter then take same group)
      lid = output_buf[(y - 1) * output->w + x];
      if (y > 0 && lid < labels_size && labels[lid].filter == f) {
        output_buf[y * output->w + x] = lid;
        labels[lid].pixel_cnt++;
        labels[lid].x_sum += x;
        labels[lid].y_sum += y;
        continue;
      }

      // Check pixel top right (check for merging)
      lid = output_buf[(y - 1) * output->w + x + 1];
      if (y > 0 && x < output->w - 1 && lid < labels_size && labels[lid].filter == f) {

        // Merging labels if needed
        uint16_t lid_tl = output_buf[(y - 1) * output->w + x - 1]; // Top left
        uint16_t lid_l = output_buf[y * output->w + x - 1]; // Left
        uint16_t m = labels[lid].id, n = labels[lid].id;
        if (x > 0 && lid_tl < labels_size && labels[lid_tl].filter == f) {
          // Merge with top left
          m = labels[lid].id;
          n = labels[lid_tl].id;
        } else if (x > 0 && lid_l < labels_size && labels[lid_l].filter == f) {
          // Merge with left
          m = labels[lid].id;
          n = labels[lid_l].id;
        }

        // Change the id of the highest id label
        if (m != n) {
          if (m > n) {
            m = n;
            n = labels[lid].id;
          }

          for (i = 0; i < labels_cnt; i++) {
            if (labels[i].id == n) {
              labels[i].id = m;
            }
          }
        }

        // Update the label
        output_buf[y * output->w + x] = lid;
        labels[lid].pixel_cnt++;
        labels[lid].x_sum += x;
        labels[lid].y_sum += y;
        continue;
      }

      // Take top left
      lid = output_buf[(y - 1) * output->w + x - 1];
      if (y > 0 && x > 0 && lid < labels_size && labels[lid].filter == f) {
        output_buf[y * output->w + x] = lid;
        labels[lid].pixel_cnt++;
        labels[lid].x_sum += x;
        labels[lid].y_sum += y;
        continue;
      }

      // Take left
      lid = output_buf[y * output->w + x - 1];
      if (x > 0 && lid < labels_size && labels[lid].filter == f) {
        output_buf[y * output->w + x] = lid;
        labels[lid].pixel_cnt++;
        labels[lid].x_sum += x;
        labels[lid].y_sum += y;
        continue;
      }

      // Check if there is enough space
      if (labels_cnt >= labels_size - 1) {
        break;
      }

      // Create new group
      lid = labels_cnt;
      output_buf[y * output->w + x] = lid;
      labels[lid].id = lid;
      labels[lid].filter = f;
      labels[lid].pixel_cnt = 1;
      labels[lid].x_min = x;
      labels[lid].y_min = y;
      labels[lid].x_sum = x;
      labels[lid].y_sum = y;
      labels_cnt++;
    }
  }

  if (labels_cnt >= labels_size - 1) {
    printf("Break did not work: we have %d labels\n", labels_cnt);
  }

  // Merge connected labels
  for (i = 0; i < labels_cnt; i++) {
    if (labels[i].id != i) {
      uint16_t new_id = labels[i].id;
      labels[new_id].pixel_cnt += labels[i].pixel_cnt;
      labels[new_id].x_sum += labels[i].x_sum;
      labels[new_id].y_sum += labels[i].y_sum;

      //printf("%d == %d,  ",new_id, i);

      if (labels[i].x_min < labels[new_id].x_min) { labels[new_id].x_min = labels[i].x_min; }
      if (labels[i].y_min < labels[new_id].y_min) { labels[new_id].y_min = labels[i].y_min; }
    }
  }

  *labels_count = labels_cnt;

  // Replace ID's
  for (y = 0; y < input->h; y++) {
    for (x = 0; x < input->w / 2; x++) {
      uint16_t lid = output_buf[y * output->w + x];
      if (lid < labels_cnt) {
        output_buf[y * output->w + x] = labels[lid].id;
      }
    }
  }
}
int compare (const void * a, const void * b)
{
  return ( *(int*)a - *(int*)b );
}
uint16_t BestEscape(struct image_label_t *labels, uint16_t width, uint16_t labels_count)
{

	uint16_t map[20];
	map[0] = 0;
        uint16_t x_max = 0;

	for(int i = 0; i < labels_count; i++)
	{
		// printf(labels[i].x_min);		
		x_max = (labels[i].x_sum / labels[i].pixel_cnt - labels[i].x_min) * 2 + labels[i].x_min;
		
		map[i*2 + 1] = labels[i].x_min;
		map[i*2 + 2] = x_max;
		
	}
	
	if(x_max < width)
	{
		map[labels_count*2 + 1] = width;
	}

	// uint16_t sortedmap[20];

	qsort (map, 20, sizeof(uint16_t), compare);

	int BiggestOpenDist = 0;
	int BiggestOpenIndex = 0;
	int CurrentOpenDist = 0;

	for(int j = 0; j < 20-1; j = j+2)
	{
		CurrentOpenDist = map[j+1] - map[j];
		
		if(CurrentOpenDist > BiggestOpenDist)
		{
			BiggestOpenDist = CurrentOpenDist;
			BiggestOpenIndex = j;
		}

	}
	
	
	return BiggestOpenDist / 2 + map[BiggestOpenIndex];	

}
uint8_t ScanObjects(struct image_t *img)
{
	//Orange pole detector

	//uint8_t margin = 30;
	uint8_t ymin   = 70;//144 - margin;
	uint8_t ymax   = 134;//144 + margin;
	uint8_t umin   = 70;//92  - margin;
	uint8_t umax   = 124;//92  + margin;
	uint8_t vmin   = 127;//145 - margin;
	uint8_t vmax   = 255;//145 + margin;
        //uint8_t xtarget = 0;

	struct image_filter_t filter[2];
	filter[0].y_min = ymin;
  	filter[0].y_max = ymax;
  	filter[0].u_min = umin;
  	filter[0].u_max = umax;
  	filter[0].v_min = vmin;
  	filter[0].v_max = vmax;

	uint16_t labels_count = 512;
  	struct image_label_t labels[512];

	struct image_t dst;
	image_create(&dst, img->w, img->h, IMAGE_GRADIENT);

	image_labeling(img, &dst, filter, 1, labels, &labels_count);


	if (labels_count > 0)
	{
		for(int j = 0; j < labels_count; j++)
		{
		   if (labels[j].pixel_cnt >= 100) {
		       printf("labels ID %d \t", labels[j].id);
		       printf("labels cnt %d \n", labels[j].pixel_cnt);
		   }
		}
		
		xtarget = BestEscape(labels, img->w,labels_count);
		printf("xtarget: %d \n",xtarget);
	}
        else {printf("lol");}
        
        return xtarget;
}
bool_t colorfilter_func(struct image_t* img);
bool_t colorfilter_func(struct image_t* img)
{
  // Filter
  //color_count = image_yuv422_colorfilt(img,img,
  //    color_lum_min,color_lum_max,
  //    color_cb_min,color_cb_max,
  //    color_cr_min,color_cr_max
  //    );
  //DOWNLINK_SEND_COLORFILTER(DefaultChannel, DefaultDevice, &color_count);

  //emsimg = img;

  //printf("image height raw: %d \t", img->h);
  //printf("colour_count raw is: %d \n", color_count);

  xtarget = ScanObjects(img);

  return FALSE;
}

void colorfilter_init(void)
{
  cv_add(colorfilter_func);
}

